import logging
from fastapi import FastAPI, HTTPException, Depends, status
from sqlalchemy import create_engine, Column, Integer, String
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, Session
from pydantic import BaseModel
import urllib
import sqlalchemy.exc

# Set up logging
logging.basicConfig(
    format="%(asctime)s - %(levelname)s - %(message)s",
    level=logging.INFO,
    handlers=[
        logging.StreamHandler(),  # Logs to console
        logging.FileHandler("app.log")  # Logs to app.log file
    ]
)

logger = logging.getLogger()

# Database config using Windows Authentication
params = urllib.parse.quote_plus(
    "Driver={ODBC Driver 17 for SQL Server};"
    "Server=HARSHAP;"
    "Database=login_db;"
    "Trusted_Connection=yes;"
)

DATABASE_URL = f"mssql+pyodbc:///?odbc_connect={params}"

# SQLAlchemy setup
engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(bind=engine)
Base = declarative_base()

# User table
class User(Base):
    __tablename__ = 'users'
    id = Column(Integer, primary_key=True, index=True)
    username = Column(String(50), unique=True, nullable=False)
    password = Column(String(100), nullable=False)

Base.metadata.create_all(bind=engine)

# FastAPI app
app = FastAPI()

# DB dependency
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# Request model
class UserRequest(BaseModel):
    username: str
    password: str

# Register endpoint with logging
@app.post("/register")
def register(request: UserRequest, db: Session = Depends(get_db)):
    try:
        existing_user = db.query(User).filter(User.username == request.username).first()
        if existing_user:
            raise HTTPException(status_code=400, detail="Username already exists")
        
        new_user = User(username=request.username, password=request.password)
        db.add(new_user)
        db.commit()
        db.refresh(new_user)

        # Log registration success
        logger.info(f"User registered successfully: {new_user.username}, User ID: {new_user.id}")

        return {"message": "User registered successfully", "user_id": new_user.id}
    
    except sqlalchemy.exc.SQLAlchemyError as e:
        db.rollback()
        logger.error(f"Database error during registration: {str(e)}")
        raise HTTPException(status_code=500, detail="Database error during registration")

    except Exception as e:
        logger.error(f"Unexpected error: {str(e)}")
        raise HTTPException(status_code=500, detail="Unexpected error")

# Login endpoint with logging
@app.post("/login")
def login(request: UserRequest, db: Session = Depends(get_db)):
    try:
        user = db.query(User).filter(
            User.username == request.username, User.password == request.password
        ).first()

        if not user:
            # Log failed login attempt
            logger.warning(f"Failed login attempt for username: {request.username}")
            raise HTTPException(status_code=401, detail="Invalid username or password")

        # Log successful login
        logger.info(f"Login successful for user: {request.username}, User ID: {user.id}")

        return {"message": "Login successful", "user_id": user.id}
    
    except sqlalchemy.exc.SQLAlchemyError as e:
        logger.error(f"Database error during login: {str(e)}")
        raise HTTPException(status_code=500, detail="Database error during login")

    except Exception as e:
        logger.error(f"Unexpected error: {str(e)}")
        raise HTTPException(status_code=500, detail="Unexpected error")